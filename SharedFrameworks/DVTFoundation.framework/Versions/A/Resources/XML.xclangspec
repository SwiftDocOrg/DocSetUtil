
// XML

(

/****************************************************************************/
// MARK: Strings and Characters
/****************************************************************************/

    {
        Identifier = "xcode.lang.xml.string";
        Syntax = {
            Start = "\"";
            End = "\"";
            IncludeRules = ( "xcode.lang.url", "xcode.lang.url.mail" );
            Type = "xcode.syntax.string";
        };
    },

    {
        Identifier = "xcode.lang.xml.string.singlequote";
        Syntax = {
            Start = "'";
            End = "'";
            IncludeRules = ( "xcode.lang.url", "xcode.lang.url.mail" );
            Type = "xcode.syntax.string";
        };
    },

    {
        Identifier = "xcode.lang.xml.character";
        Syntax = {
            Start = "&";
            End = ";";
            Type = "xcode.syntax.character";
        };
    },
    {
        Identifier = "xcode.lang.xml.word";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_";
            Type = "xcode.syntax.identifier";    // converted to keywords or attributes internally
        };
    },
    {
        Identifier = "xcode.lang.xml.interestingOperators";
        Syntax = {
            Words = (
                "<?php",
                "<?PHP",
                "?>",
                "%>",
				"<!DOCTYPE",
				"<!ELEMENT",
				"<!ENTITY",
				"<!ATTLIST",
            );
            Type = "xcode.syntax.keyword";
            WordBreak = NO;
        };
    },
    {
        Identifier = "xcode.lang.xml.other.interestingOperators";
        Syntax = {
            StartChars = "<";
            Chars = "?%";
            // these are separate from "xcode.lang.xml.interestingOperators" so that words immediately following don't confuse the parser
            Words = (
                "<?",
                "<%",
                "<%%",
            );
            Type = "xcode.syntax.keyword";
            WordBreak = NO;
        };
    },
    {
        Identifier = "xcode.lang.xml.other.cdata";
        Syntax = {
            StartChars = "<";
            Chars = "![ACDT";
            // Use a regex (that doesn't need to end at what's matched by StartChars/Chars) so that a C, A, D, or T immediately following don't confuse the parser.
            Match = (
                "^<!\\[CDATA\\[",
            );
            Type = "xcode.syntax.keyword";
        };
    },
    

/****************************************************************************/
// MARK: Comments
/****************************************************************************/

    {
        Identifier = "xcode.lang.xml.comment";
        Syntax = {
            Start = "<!--";
            End = "-->";
            Foldable = YES;
            IncludeRules = ( "xcode.lang.url", "xcode.lang.url.mail", "xcode.lang.comment.mark" );
            Type = "xcode.syntax.comment";
        };
    },


/****************************************************************************/
// MARK: Entities
/****************************************************************************/

    {
        Identifier = "xcode.lang.xml.entity.end";
        Syntax = {
            Start = "</";
            End = ">";
            Type = "xcode.syntax.entity";
        };
    },
    {
        Identifier = "xcode.lang.xml.entity.start";
        Syntax = {
            Tokenizer = "xcode.lang.xml.entity.lexer";
            Start = "<";
            End = ">";
            AltEnd = "/>";
            Type = "xcode.syntax.entity.start";
            AltType = "xcode.syntax.entity";
            AltToken = "xcode.lang.xml.entity.standalone";
        };
    },
    {
        Identifier = "xcode.lang.xml.entity.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.xml.word",
                "xcode.lang.xml.string",
                "xcode.lang.xml.string.singlequote",
            );
        };
    },


/****************************************************************************/
// MARK: DTD stuff
/****************************************************************************/

    {
        Identifier = "xcode.lang.xml.entity.element";
        Syntax = {
            Start = "<!ELEMENT";
            End = ">";
            IncludeRules = ( "xcode.lang.xml.character" );
            Type = "xcode.syntax.keyword";
        };
    },

    {
        Identifier = "xcode.lang.xml.entity.entity";
        Syntax = {
            Start = "<!ENTITY";
            End = ">";
            IncludeRules = ( "xcode.lang.xml.character" );
            Type = "xcode.syntax.keyword";
        };
    },

    {
        Identifier = "xcode.lang.xml.entity.attlist";
        Syntax = {
            Start = "<!ATTLIST";
            End = ">";
            IncludeRules = ( "xcode.lang.xml.character" );
            Type = "xcode.syntax.keyword";
        };
    },

    {
        Identifier = "xcode.lang.xml.entity.doctype";
        Syntax = {
            Start = "<!DOCTYPE";
            End = ">";
            IncludeRules = ( "xcode.lang.xml.character", "xcode.lang.xml.string", "xcode.lang.xml.string.singlequote" );
            Type = "xcode.syntax.keyword";
        };
    },

    {
        Identifier = "xcode.lang.xml.entity.cdata";
        Syntax = {
            Tokenizer = "xcode.lang.xml.entity.cdata.lexer";
            Recursive = NO;
            Foldable = YES;
            Start = "xcode.lang.xml.other.cdata";
            End = "]]>";
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.xml.entity.cdata.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.xml.entity.cdata.end",
            );
        };
    },
    {
        Identifier = "xcode.lang.xml.entity.cdata.end";
        Syntax = {
            Words = (
                "]]>",
            );
            Type = "xcode.syntax.keyword";
        };
    },

/****************************************************************************/
// MARK: Processing Instructions
/****************************************************************************/

    {
        Identifier = "xcode.lang.xml.processing";
        Syntax = {
            Start = "<?";
            End = "?>";
            IncludeRules = ( "xcode.lang.xml.character", "xcode.lang.xml.string", "xcode.lang.xml.string.singlequote" );
            Type = "xcode.syntax.keyword";
        };
    },

/****************************************************************************/
// MARK: XML Syntax Coloring
/****************************************************************************/

    {
        Identifier = "xcode.lang.xml";
        Description = "XML Coloring";
        BasedOn = "xcode.lang.simpleColoring";
        IncludeInMenu = YES;
        Name = "XML";
        Syntax = {
            Tokenizer = "xcode.lang.xml.lexer";
            IncludeRules = (
                "xcode.lang.php.inxml",
                "xcode.lang.php.inxml2",
                "xcode.lang.ruby.inxml",
                "xcode.lang.xml.processing",
                "xcode.lang.xml.entity.element",
                "xcode.lang.xml.entity.entity",
                "xcode.lang.xml.entity.attlist",
                "xcode.lang.xml.entity.doctype",
                "xcode.lang.xml.entity.cdata",
                "xcode.lang.xml.entity.block",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.xml.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.xml.comment",
                "xcode.lang.xml.interestingOperators",
                "xcode.lang.xml.other.interestingOperators",
                "xcode.lang.xml.other.cdata",
                "xcode.lang.xml.entity.end",
                "xcode.lang.xml.entity.start",
                "xcode.lang.xml.character",
            );
        };
    },
    {
        Identifier = "xcode.lang.xml.entity.block";
        Syntax = {
            Tokenizer = "xcode.lang.xml.lexer";
            Start = "xcode.lang.xml.entity.start";
            End = "xcode.lang.xml.entity.end";
            Recursive = YES;
            Foldable = YES;
            Type = "xcode.syntax.definition.function";
            IncludeRules = (
                "xcode.lang.php.inxml",
                "xcode.lang.php.inxml2",
                "xcode.lang.ruby.inxml",
                "xcode.lang.xml.processing",
                "xcode.lang.xml.entity.element",
                "xcode.lang.xml.entity.entity",
                "xcode.lang.xml.entity.attlist",
                "xcode.lang.xml.entity.doctype",
                "xcode.lang.xml.entity.cdata",
            );
        };
    },
)
