
// HTML

(

/****************************************************************************/
// MARK: Strings and Characters
/****************************************************************************/

    {
        Identifier = "xcode.lang.html.string";
        Syntax = {
            Start = "\"";
            End = "\"";
            IncludeRules = ( "xcode.lang.url", "xcode.lang.url.mail" );
            Type = "xcode.syntax.string";
        };
    },

    {
        Identifier = "xcode.lang.html.string.singlequote";
        Syntax = {
            Start = "'";
            End = "'";
            IncludeRules = ( "xcode.lang.url", "xcode.lang.url.mail" );
            Type = "xcode.syntax.string";
        };
    },

    {
        Identifier = "xcode.lang.html.character";
        Syntax = {
            Start = "&";
            End = ";";
            Type = "xcode.syntax.character";
        };
    },
    {
        Identifier = "xcode.lang.html.word";
        Syntax = {
            CaseSensitive = NO;
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_";
            Type = "xcode.syntax.identifier";    // converted to keywords or attributes internally
        };
    },
    {
        Identifier = "xcode.lang.html.interestingOperators";
        Syntax = {
            Words = (
                "<?php",
                "<?PHP",
                "<?",
                "?>",
                "<%%",
                "<%",
                "%>",
				"<!",
            );
            Type = "xcode.syntax.keyword";
            WordBreak = NO;
        };
    },
    

/****************************************************************************/
// MARK: Comments
/****************************************************************************/

    {
        Identifier = "xcode.lang.html.comment";
        Syntax = {
            Start = "<!--";
            End = "-->";
            Foldable = YES;
            IncludeRules = ( "xcode.lang.url", "xcode.lang.url.mail" );
            Type = "xcode.syntax.comment";
        };
    },


/****************************************************************************/
// MARK: Entities
/****************************************************************************/

    {
        Identifier = "xcode.lang.html.entity.end";
        Syntax = {
            Start = "</";
            End = ">";
            Type = "xcode.syntax.entity";
        };
    },
    {
        Identifier = "xcode.lang.html.entity.start";
        Syntax = {
            SourceScannerClassName = "DVTHTMLEntityScanner";
            Tokenizer = "xcode.lang.html.entity.lexer";
            Start = "<";
            End = ">";
            AltEnd = "/>";
            Type = "xcode.syntax.entity.start";
            AltType = "xcode.syntax.entity";
            AltToken = "xcode.lang.html.entity.standalone";
            
            // this dictionary maps an entity name to a token for the whole node. And yes, to us all scripts are JavaScript and all style sheets are CSS.
            // also listed are entities that are often left unclosed (by ignoring them, we won't let you fold the blocks. But that's life.)
            EntityNameMap = {
                "p" = "xcode.lang.html.entity.ignore";
                "br" = "xcode.lang.html.entity.ignore";
                "hr" = "xcode.lang.html.entity.ignore";
                "script" = "xcode.lang.html.entity.script.start";
                "style" = "xcode.lang.html.entity.style.start";
            };
        };
    },
    {
        Identifier = "xcode.lang.html.entity.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.html.word",
                "xcode.lang.html.string",
                "xcode.lang.html.string.singlequote",
            );
        };
    },


/****************************************************************************/
// MARK: DTD stuff
/****************************************************************************/

    {
        Identifier = "xcode.lang.html.entity.element";
        Syntax = {
            Start = "<!";
            End = ">";
            IncludeRules = ( "xcode.lang.html.character", "xcode.lang.html.string", "xcode.lang.html.string.singlequote" );
            Type = "xcode.syntax.keyword";
        };
    },


/****************************************************************************/
// MARK: Processing Instructions
/****************************************************************************/

    {
        Identifier = "xcode.lang.html.processing";
        Syntax = {
            Start = "<?";
            End = "?>";
            IncludeRules = ( "xcode.lang.html.character", "xcode.lang.html.string", "xcode.lang.html.string.singlequote" );
            Type = "xcode.syntax.keyword";
        };
    },

/****************************************************************************/
// MARK: HTML Syntax Coloring
/****************************************************************************/

    {
        Identifier = "xcode.lang.html";
        Description = "HTML Coloring";
        BasedOn = "xcode.lang.simpleColoring";
        IncludeInMenu = YES;
        Name = "HTML";
        Syntax = {
            Tokenizer = "xcode.lang.html.lexer";
            IncludeRules = (
                "xcode.lang.php.inxml",
                "xcode.lang.php.inxml2",
                "xcode.lang.ruby.inxml",
                "xcode.lang.ruby.inxml2",
                "xcode.lang.html.processing",
                "xcode.lang.html.entity.element",
                "xcode.lang.html.entity.script",
                "xcode.lang.html.entity.style",
                "xcode.lang.html.entity.block",
            );
            Type = "xcode.syntax.plain";
        };
    },
    {
        Identifier = "xcode.lang.html.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.html.comment",
                "xcode.lang.html.interestingOperators",
                "xcode.lang.html.entity.end",
                "xcode.lang.html.entity.start",
                "xcode.lang.html.character",
            );
        };
    },
    {
        Identifier = "xcode.lang.html.entity.block";
        Syntax = {
            Tokenizer = "xcode.lang.html.lexer";
            SourceScannerClassName = "DVTHTMLScanner";
            Start = "xcode.lang.html.entity.start";
            End = "xcode.lang.html.entity.end";
            Recursive = YES;
            Foldable = YES;
            Type = "xcode.syntax.definition.function";
            IncludeRules = (
                "xcode.lang.php.inxml",
                "xcode.lang.php.inxml2",
                "xcode.lang.ruby.inxml",
                "xcode.lang.ruby.inxml2",
                "xcode.lang.html.processing",
                "xcode.lang.html.entity.element",
                "xcode.lang.html.entity.script",
                "xcode.lang.html.entity.style",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.html.entity.script";
        Syntax = {
            Start = "xcode.lang.html.entity.script.start";
            End = "</script>";
            CaseSensitive = NO;
            ParseEndBeforeIncludedRules = YES;
			Foldable = YES;
            IncludeRules = (
                "xcode.lang.javascript",
            );
            Type = "xcode.syntax.keyword";
        };
    },
    
    {
        Identifier = "xcode.lang.html.entity.style";
        Syntax = {
            Start = "xcode.lang.html.entity.style.start";
            End = "</style>";
            CaseSensitive = NO;
            ParseEndBeforeIncludedRules = YES;
			Foldable = YES;
            IncludeRules = (
                "xcode.lang.css",
            );
            Type = "xcode.syntax.keyword";
        };
    },
    
)
