// Metal
(

/****************************************************************************/
// MARK: Metal keywords
/****************************************************************************/

    {
        Identifier = "xcode.lang.metal.identifier";
        Syntax = {
            StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_~";
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
                // Keywords from C
                "__alignof__",
                "__asm__",
                "__attribute__",
                "__complex__",
                "__extension__",
                "__imag__",
                "__label__",
                "__real__",
                "__restrict",
                "__restrict__",
                "__typeof__",
                "_Bool",
                "_Complex",
                "_Imaginary",
                "__block",
                "asm",
                "auto",
                "bool",
                "break",
                "case",
                "char",
                "const",
                "continue",
                "default",
                "do",
                "double",
                "else",
                "enum",
                "extern",
                "false",
                "float",
                "for",
                "goto",
                "if",
                "inline",
                "int",
                "long",
                "register",
                "restrict",
                "return",
                "short",
                "signed",
                "sizeof",
                "static",
                "struct",
                "switch",
                "true",
                "typedef",
                "typeof",
                "union",
                "unsigned",
                "void",
                "volatile",
                "while",
                "FALSE",
                "NULL",
                "TRUE",
                
                // Keywords from C++
                "__private_extern__",
                "and",
                "and_eq",
                "bitand",
                "bitor",
                "catch",
                "class",
                "compl",
                "const_cast",
                "delete",
                "dynamic_cast",
                "explicit",
                "export",
                "friend",
                "mutable",
                "namespace",
                "new",
                "not",
                "not_eq",
                "operator",
                "or",
                "or_eq",
                "private",
                "protected",
                "public",
                "reinterpret_cast",
                "static_cast",
                "template",
                "this",
                "throw",
                "try",
                "typeid",
                "typename",
                "typeid",
                "using",
                "virtual",
                "wchar_t",
                "xor",
                "xor_eq",

                // Keywords from C++0x
                "alignof",
                "char16_t",
                "char32_t",
                "constexpr",
                "decltype",
                "noexcept",
                "nullptr",
                "override",
                "static_assert",
                "thread_local",

                // Keywords from Clang C++ extensions
                "__has_nothrow_assign",
                "__has_nothrow_copy",
                "__has_nothrow_constructor",
                "__has_trivial_assign",
                "__has_trivial_copy",
                "__has_trivial_constructor",
                "__has_trivial_destructor",
                "__has_virtual_destructor",
                "__is_abstract",
                "__is_base_of",
                "__is_class",
                "__is_convertible_to",
                "__is_empty",
                "__is_enum",
                "__is_literal",
                "__is_literal_type",
                "__is_pod",
                "__is_polymorphic",
                "__is_trivial",
                "__is_union",
                "__is_trivially_copyable",
                "__underlying_type",

				// Keywords from Metal
				"metal",
				"uchar",
				"ushort",
				"uint",
				"ulong",
				"half",
				"vec",
				"bool2",
				"char2",
				"uchar2",
				"short2",
				"ushort2",
				"int2",
				"uint2",
				"long2",
				"ulong2",
				"half2",
				"float2",
				"bool3",
				"char3",
				"uchar3",
				"short3",
				"ushort3",
				"int3",
				"uint3",
				"long3",
				"ulong3",
				"half3",
				"float3",
				"bool4",
				"char4",
				"uchar4",
				"short4",
				"ushort4",
				"int4",
				"uint4",
				"long4",
				"ulong4",
				"half4",
				"float4",
				"half2x2",
				"half2x3",
				"half2x4",
				"half3x2",
				"half3x3",
				"half3x4",
				"half4x2",
				"half4x3",
				"half4x4",
				"float2x2",
				"float2x3",
				"float2x4",
				"float3x2",
				"float3x3",
				"float3x4",
				"float4x2",
				"float4x3",
				"float4x4",
				"atomic",
				"atomic_int",
				"atomic_uint",
				
				"packed_char2",
				"packed_char3",
				"packed_char4",
				"packed_uchar2",
				"packed_uchar3",
				"packed_uchar4",
				"packed_short2",
				"packed_short3",
				"packed_short4",
				"packed_ushort2",
				"packed_ushort3",
				"packed_ushort4",
				"packed_int2",
				"packed_int3",
				"packed_int4",
				"packed_uint2",
				"packed_uint3",
				"packed_uint4",
				"packed_half2",
				"packed_half3",
				"packed_half4",
				"packed_float2",
				"packed_float3",
				"packed_float4",

				"sampler",

				"texture1d",
				"texture1d_array",
				"texture2d",
				"texture2d_array",
				"texture3d",
				"texturecube",
				"texturecube_array",
				"texture2d_ms",
				"depth2d",
				"depth2d_array",
				"depthcube",
				"depth2d_ms",
				"depthcube_array",
				
				"access",
				"depth_format",
				"coord",
				"filter",
				"min_filter",
				"mag_filter",
				"mip_filter",
				"s_address",
				"t_address",
				"r_address",
				"address",
				"compare_func",

				"bias",
				"level",
				"gradient2d",
				"gradient3d",
				"gradientcube",
				
				"memory_order",

				"device",
				"constant",
				"threadgroup",
				"thread",

				"kernel",
				"fragment",
				"vertex",

             );
            Type = "xcode.syntax.keyword";
            AltType = "xcode.syntax.identifier";    // non-keywords are identifiers
        };
    },
    
    {
        Identifier = "xcode.lang.metal.interestingOperators";
        Syntax = {
            Words = (
                "...",
                "->",
                "::",
                ".",
             );
            Type = "xcode.syntax.plain";
        };
    },

/****************************************************************************/
// MARK: Metal Syntax Coloring
/****************************************************************************/

    {
        Identifier = "xcode.lang.metal";
        Description = "Metal Coloring";
        BasedOn = "xcode.lang.c";       // for text macros
        IncludeInMenu = YES;
        UsesCLikeIndentation = YES;
        Name = "Metal";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            IncludeRules = (
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
                "xcode.lang.metal.class",
                "xcode.lang.metal.method.definition",
                "xcode.lang.metal.function.declaration",
                "xcode.lang.metal.function.definition",
                "xcode.lang.metal.typedef",
                "xcode.lang.metal.templatedefinition",
                "xcode.lang.metal.enumblock",
                "xcode.lang.metal.structblock",
                "xcode.lang.metal.unionblock",
                "xcode.lang.metal.block.toplevel",
                "xcode.lang.metal.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.metal.system.function";
        Syntax = {
            Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
            Words = (
            "clamp",
            "mix",
            "saturate",
            "sign",
            "smoothstep",
            "step",
            "abs",
            "absdiff",
            "addsat",
            "clz",
            "ctz",
            "hadd",
            "madhi",
            "madsat",
            "max",
            "min",
            "mulhi",
            "popcount",
            "rhadd",
            "rotate",
            "subsat",
            "all",
            "any",
            "isfinite",
            "isinf",
            "isnan",
            "isnormal",
            "isordered",
            "isunordered",
            "not",
            "select",
            "signbit",
            "acos",
            "acosh",
            "asin",
            "asinh",
            "atan",
            "atan2",
            "atanh",
            "ceil",
            "copysign",
            "cos",
            "cosh",
            "cospi",
            "exp",
            "exp2",
            "exp10",
            "fabs",
            "fdim",
            "floor",
            "fma",
            "fmax",
            "fmin",
            "fmod",
            "fract",
            "frexp",
            "ilogb",
            "ldexp",
            "log",
            "log2",
            "log10",
            "modf",
            "pow",
            "powr",
            "rint",
            "round",
            "rsqrt",
            "sin",
            "sincos",
            "sinh",
            "sinpi",
            "sqrt",
            "tan",
            "tanh",
            "tanpi",
            "trunc",
            "determinant",
            "transpose",
            "cross",
            "distance",
            "distance_squared",
            "dot",
            "faceforward",
            "length",
            "length_squared",
            "normalize",
            "reflect",
            "refract",
            "threadgroup_barrier",
            "dfdx",
            "dfdy",
            "fwidth",
            "get_num_samples",
            "get_sample_position",
            "discard_fragment",
            "unpack_unorm4x8_to_float",
            "unpack_snorm4x8_to_float",
            "unpack_unorm4x8_to_half",
            "unpack_snorm4x8_to_half",
            "unpack_unorm4x8_srgb_to_float",
            "unpack_unorm4x8_srgb_to_half",
            "unpack_unorm2x16_to_float",
            "unpack_snorm2x16_to_float",
            "unpack_unorm2x16_to_half",
            "unpack_snorm2x16_to_half",
            "unpack_unorm10a2_to_float",
            "unpack_unorm565_to_float",
            "unpack_unorm10a2_to_half",
            "unpack_unorm565_to_half",
            "pack_float_to_unorm4x8",
            "pack_float_to_snorm4x8",
            "pack_half_to_unorm4x8",
            "pack_half_to_snorm4x8",
            "pack_float_to_srgb_unorm4x8",
            "pack_half_to_srgb_unorm4x8",
            "pack_float_to_unorm2x16",
            "pack_float_to_snorm2x16",
            "pack_half_to_unorm2x16",
            "pack_half_to_snorm2x16",
            "pack_float_to_unorm10a2",
            "pack_float_to_unorm565",
            "pack_half_to_unorm10a2",
            "pack_half_to_unorm565",
            "atomic_store_explicit",
            "atomic_load_explicit",
            "atomic_exchange_explicit",
            "atomic_compare_exchange_weak_explicit",
            "atomic_fetch_add_explicit",
            "atomic_fetch_and_explicit",
            "atomic_fetch_max_explicit",
            "atomic_fetch_min_explicit",
            "atomic_fetch_or_explicit",
            "atomic_fetch_sub_explicit",
            "atomic_fetch_xor_explicit",
            );
            Type = "xcode.syntax.identifier.function.system";
        };
    },

    
    // The following rule returns tokens to the other rules
    {
        Identifier = "xcode.lang.metal.lexer";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.metal.attribute",
                "xcode.lang.metal.system.function",                
                "xcode.lang.metal.identifier",
                "xcode.lang.number",
                "xcode.lang.metal.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.lexer.toplevel";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.metal.attribute",
                "xcode.lang.metal.operatorclause",
                "xcode.lang.metal.identifier",
                "xcode.lang.number",
                "xcode.lang.metal.interestingOperators",
            );
        };
    },

    {
        Identifier = "xcode.lang.metal.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.attribute";
            Rules = (
                "__attribute__",
                "xcode.lang.metal.parenexpr.attribute",
            );
            Type = "xcode.syntax.c.attribute";
        };
    },
    {
        Identifier = "xcode.lang.metal.lexer.attribute";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.metal.identifier",
                "xcode.lang.number",
                "xcode.lang.metal.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.parenexpr.attribute";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.attribute";
            Start = "(";
            End = ")";
            Recursive = YES;
        };
    },
    
    {
        Identifier = "xcode.lang.metal.lexer.operator";
        Syntax = {
            IncludeRules = (
                "xcode.lang.metal.identifier",
                "xcode.lang.metal.anoperator",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.identifier.qualified";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.identifier",
                "::",                               // need at least one qualifier or this rule shouldn't match at all
                "xcode.lang.metal.operatorclause|xcode.lang.metal.identifier",
                "xcode.lang.metal.identifier.qualified.more*",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.identifier.qualified.more";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "::",
                "xcode.lang.metal.operatorclause|xcode.lang.metal.identifier",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.function.declaration";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.function.declarator",
                "const?",
                "override?",
                "xcode.lang.metal.throwclause?",
                "xcode.lang.metal.identifier?",
                ";",
            );
            Type = "xcode.syntax.declaration.function";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.function.definition";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.function.declarator",
                "const?",
                "override?",
                "xcode.lang.metal.throwclause?",
                "xcode.lang.metal.identifier?",
                "xcode.lang.metal.block",
            );
            Type = "xcode.syntax.definition.function";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.function.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.operatorclause|xcode.lang.metal.identifier",
                "xcode.lang.metal.templateclause?",
                "xcode.lang.metal.parenexpr",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.operatorclause";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.operator";
            Rules = (
                "operator",
                "xcode.lang.metal.anoperator",
            );
        };
    },

    {
        Identifier = "xcode.lang.metal.anoperator";
        Syntax = {
            Match = (
                "^[ \t]*(new|delete|->\\*|->|,|\\+\\+|--|\\|\\||&&|>>=|<<=|>>|<<|>=|<=|==|!=|\\|=|&=|\\^=|%=|/=|\\*=|-=|\\+=|>|<|\\+|-|\\*|/|%|\\^|&|\\||~|!|=|\\[\\]|\\(\\))[ \t]*",
            );
        };
    },

    {
        Identifier = "xcode.lang.metal.class";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.class.declarator",
                "xcode.lang.metal.block.class",
            );
            Type = "xcode.syntax.definition.cpp.class";
        };
    },
    {
        Identifier = "xcode.lang.metal.class.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "class",
                "xcode.lang.metal.class.name",
                "xcode.lang.metal.class.declarator.superclass?",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.class.name";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "xcode.lang.metal.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.class.declarator.superclass";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                ":",
                "public?",
                "private?",
                "protected?",
                "xcode.lang.metal.identifier+",
                "xcode.lang.metal.classnames.list*",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.class.classnames.list";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                ",",
                "public?",
                "private?",
                "protected?",
                "xcode.lang.metal.identifier+",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.method.declaration.classscope";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.function.declarator",   // Looks like a function, but it's really a method.
                "const?",
                "xcode.lang.metal.throwclause?",
                "xcode.lang.metal.identifier?",
                ";",
            );
            Type = "xcode.syntax.declaration.method";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.method.definition.classscope";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.function.declarator",   // Looks like a function, but it's really a method.
                "const?",
                "xcode.lang.metal.throwclause?",
                "xcode.lang.metal.identifier?",
                "xcode.lang.metal.initializerclause?",
                "xcode.lang.metal.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.method.definition";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.method.declarator",
                "const?",
                "xcode.lang.metal.throwclause?",
                "xcode.lang.metal.identifier?",
                "xcode.lang.metal.initializerclause?",
                "xcode.lang.metal.block",
            );
            Type = "xcode.syntax.definition.method";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.method.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Rules = (
                "xcode.lang.metal.identifier.qualified",
                "xcode.lang.metal.templateclause?",
                "xcode.lang.metal.parenexpr",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    
    {
        Identifier = "xcode.lang.metal.throwclause";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "throw",
                "xcode.lang.metal.parenexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.templatedefinition";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "template",
                "xcode.lang.metal.templateclause",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.templateclause";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Start = "<";
            End = ">";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.metal.block",
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.metal.initializerclause";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Start = ":";
            Until = "{";
            IncludeRules = (
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.enumblock";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "xcode.lang.metal.enum.declarator|xcode.lang.metal.nsenum.declarator",
                "xcode.lang.metal.block",
            );
            Type = "xcode.syntax.declaration.enum";
        };
    },
    {
        Identifier = "xcode.lang.metal.enum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "enum",
                "xcode.lang.metal.identifier?",
                ":?",
                "xcode.lang.metal.typeidentifier*",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.nsenum.declarator";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "NS_ENUM",
                "xcode.lang.metal.parenexpr",
            );
        };
    },

    {
        Identifier = "xcode.lang.metal.structblock";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "struct",
                "xcode.lang.metal.identifier?",
                ":?",
                "xcode.lang.metal.typeidentifier*",
                "xcode.lang.metal.typeblock",
            );
            Type = "xcode.syntax.declaration.struct";
        };
    },
    {
        Identifier = "xcode.lang.metal.unionblock";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "union",
                "xcode.lang.metal.identifier?",
                ":?",
                "xcode.lang.metal.typeidentifier*",
                "xcode.lang.metal.typeblock",
            );
            Type = "xcode.syntax.declaration.union";
        };
    },
    {
        Identifier = "xcode.lang.metal.typeidentifier";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "xcode.lang.metal.identifier|int|char|float|double|short|long|unsigned|signed|half",
            );
        };
    },

/****************************************************************************/
// MARK: Typedefs
/****************************************************************************/

    {
        Identifier = "xcode.lang.metal.lexer.typedef";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.metal.attribute",
                "xcode.lang.metal.operatorclause",
                "xcode.lang.metal.typedef.end",
                "xcode.lang.metal.identifier",
                "xcode.lang.number",
                "xcode.lang.metal.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.lexer.typedef.name";
        Syntax = {
            IncludeRules = (
                "xcode.lang.comment.degenerate",
                "xcode.lang.comment.headerdoc",
                "xcode.lang.comment.headerdoc.star",
                "xcode.lang.comment.headerdoc.singleline.bang",
                "xcode.lang.comment.headerdoc.singleline.slash",
                "xcode.lang.comment",
                "xcode.lang.comment.singleline",
                "xcode.lang.c.preprocessor",
                "xcode.lang.string",
                "xcode.lang.character",
                "xcode.lang.completionplaceholder",
                "xcode.lang.metal.attribute",
                "xcode.lang.metal.operatorclause",
                "xcode.lang.metal.typedef.name",
                "xcode.lang.metal.identifier",
                "xcode.lang.number",
                "xcode.lang.metal.interestingOperators",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.typedef";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.typedef";
            Start = "typedef";
            End = "xcode.lang.metal.typedef.end";
            AltEnd = ";";
            IncludeRules = (
                "xcode.lang.metal.enumblock",
                "xcode.lang.metal.structblock",
                "xcode.lang.metal.unionblock",
                "xcode.lang.metal.typedef.function",
                "xcode.lang.metal.block",
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
            );
            Type = "xcode.syntax.typedef";
        };
    },
    {
        Identifier = "xcode.lang.metal.typedef.name";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Rules = (
                "xcode.lang.metal.identifier",
            );
            Type = "xcode.syntax.name.partial";
        };
    },
    {
        Identifier = "xcode.lang.metal.typedef.end";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.typedef.name";
            Rules = (
                "xcode.lang.metal.typedef.name",
                ";?"
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    {
        Identifier = "xcode.lang.metal.typedef.function";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.typedef.name";
            Rules = (
                "(",
                "*",
                "xcode.lang.metal.typedef.name",
                ")",
            );
            Type = "xcode.syntax.name.tree";
        };
    },
    

/****************************************************************************/
// MARK: C++ Blocks
/****************************************************************************/

    {
        Identifier = "xcode.lang.metal.block";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.typeblock";
        BasedOn = "xcode.lang.c.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
                "xcode.lang.metal.structblock",
                "xcode.lang.metal.unionblock",
            );
        };
    },

    // toplevel blocks like namespaces and extern "C"
    {
        Identifier = "xcode.lang.metal.block.toplevel";
        BasedOn = "xcode.lang.metal.block";     // for text macros
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.metal.class",
                "xcode.lang.metal.method.definition",
                "xcode.lang.metal.function.declaration",
                "xcode.lang.metal.function.definition",
                "xcode.lang.metal.typedef",
                "xcode.lang.metal.templatedefinition",
                "xcode.lang.metal.enumblock",
                "xcode.lang.metal.structblock",
                "xcode.lang.metal.unionblock",
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
                "xcode.lang.metal.initializer",
            );
            Type = "xcode.syntax.plain";
        };
    },

    {
        Identifier = "xcode.lang.metal.block.class";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Start = "{";
            End = "}";
            Foldable = YES;
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.metal.method.declaration.classscope",
                "xcode.lang.metal.method.definition.classscope",
                "xcode.lang.metal.typedef",
                "xcode.lang.metal.enumblock",
                "xcode.lang.metal.structblock",
                "xcode.lang.metal.unionblock",
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.parenexpr",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.parenexpr";
        BasedOn = "xcode.lang.c.parenexpr";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Start = "(";
            End = ")";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.metal.bracketexpr",
                "xcode.lang.metal.block",
            );
        };
    },
    {
        Identifier = "xcode.lang.metal.bracketexpr";
        BasedOn = "xcode.lang.c.bracketexpr";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer";
            Start = "[";
            End = "]";
            Recursive = YES;
            IncludeRules = (
                "xcode.lang.metal.parenexpr",
            );
        };
    },
    
    {
        Identifier = "xcode.lang.metal.initializer";
        Syntax = {
            Tokenizer = "xcode.lang.metal.lexer.toplevel";
            Start = "=";
            End = ";";
            Recursive = NO;
            IncludeRules = (
                "xcode.lang.metal.block",
                "xcode.lang.metal.parenexpr",
                "xcode.lang.metal.bracketexpr",
            );
        };
    },
)

